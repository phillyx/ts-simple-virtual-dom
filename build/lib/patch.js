"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.patch = exports.E_DIFF = void 0;
const util_1 = require("./util");
var E_DIFF;
(function (E_DIFF) {
    E_DIFF[E_DIFF["REPLACE"] = 0] = "REPLACE";
    E_DIFF[E_DIFF["REORDER"] = 1] = "REORDER";
    E_DIFF[E_DIFF["PROPS"] = 2] = "PROPS";
    E_DIFF[E_DIFF["TEXT"] = 3] = "TEXT";
    E_DIFF[E_DIFF["INSERT"] = 4] = "INSERT";
    E_DIFF[E_DIFF["REMOVE"] = 5] = "REMOVE";
})(E_DIFF = exports.E_DIFF || (exports.E_DIFF = {}));
function patch(node, patches) {
    let walker = { index: 0 };
    dfsWalk(node, walker, patches);
    return node;
}
exports.patch = patch;
function dfsWalk(node, walker, patches) {
    let currentPatches = patches[walker.index];
    const len = node?.childNodes ? node.childNodes.length : 0;
    for (let i = 0; i < len; i++) {
        const child = node.childNodes[i];
        walker.index++;
        dfsWalk(child, walker, patches);
    }
    if (currentPatches) {
        applyPatches(node, currentPatches);
    }
}
function applyPatches(node, currentPatches) {
    currentPatches.forEach(patch => {
        switch (+patch.type) {
            case E_DIFF.REPLACE:
                const vnode = patch.node;
                const newNode = vnode.render();
                node.parentNode.replaceChild(newNode, node);
                break;
            case E_DIFF.REORDER:
                reorderChildren(node, patch.moves);
                break;
            case E_DIFF.PROPS:
                setProps(node, patch.props);
                break;
            case E_DIFF.TEXT:
                node.textContent = patch.node?.text ?? '';
                break;
            case E_DIFF.INSERT:
                node.parentNode?.appendChild(patch.node.render());
                break;
            default:
                throw new Error('UnKnown patch type ' + patch.type);
        }
    });
}
function reorderChildren(node, moves) {
    const staticNodeList = Array.from(node.childNodes);
    const maps = {};
    staticNodeList.forEach(node => {
        if (node.nodeType == 1) {
            const key = node.getAttribute('key');
            if (key) {
                maps[key] = node;
            }
        }
    });
    moves.forEach(move => {
        const index = move.index;
        if (move.type === E_DIFF.REPLACE) {
            // remove item
            if (staticNodeList[index] === node.childNodes[index]) {
                node.removeChild(node.childNodes[index]);
            }
            staticNodeList.splice(index, 1);
        }
        else if (move.type === E_DIFF.REORDER) {
            // insert item
            const insertNode = maps[move.item.key]
                ? maps[move.item.key].cloneNode(true)
                : typeof move.item === 'object'
                    ? move.item.render()
                    : document.createTextNode(move.item);
            staticNodeList.splice(index, 0, insertNode);
            node.insertBefore(insertNode, node.childNodes[index] || null);
        }
    });
}
function setProps(node, props) {
    for (let [key, value] of Object.entries(props)) {
        if (props[key] === undefined) {
            node.removeAttribute(key);
        }
        else {
            util_1.setAttr(node, key, value);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF0Y2guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbGliL3BhdGNoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLGlDQUFnQztBQUdoQyxJQUFZLE1BT1g7QUFQRCxXQUFZLE1BQU07SUFDaEIseUNBQU8sQ0FBQTtJQUNQLHlDQUFPLENBQUE7SUFDUCxxQ0FBSyxDQUFBO0lBQ0wsbUNBQUksQ0FBQTtJQUNKLHVDQUFNLENBQUE7SUFDTix1Q0FBTSxDQUFBO0FBQ1IsQ0FBQyxFQVBXLE1BQU0sR0FBTixjQUFNLEtBQU4sY0FBTSxRQU9qQjtBQUVELFNBQWdCLEtBQUssQ0FBQyxJQUFpQixFQUFFLE9BQXFCO0lBQzVELElBQUksTUFBTSxHQUFHLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFBO0lBQ3pCLE9BQU8sQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFBO0lBQzlCLE9BQU8sSUFBSSxDQUFBO0FBQ2IsQ0FBQztBQUpELHNCQUlDO0FBRUQsU0FBUyxPQUFPLENBQUMsSUFBaUIsRUFBRSxNQUF5QixFQUFFLE9BQXFCO0lBQ2xGLElBQUksY0FBYyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDMUMsTUFBTSxHQUFHLEdBQUcsSUFBSSxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUV6RCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzVCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFnQixDQUFBO1FBQy9DLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQTtRQUNkLE9BQU8sQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFBO0tBQ2hDO0lBQ0QsSUFBSSxjQUFjLEVBQUU7UUFDbEIsWUFBWSxDQUFDLElBQUksRUFBRSxjQUFjLENBQUMsQ0FBQTtLQUNuQztBQUNILENBQUM7QUFFRCxTQUFTLFlBQVksQ0FBQyxJQUFpQixFQUFFLGNBQTBCO0lBQ2pFLGNBQWMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDN0IsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFLLEVBQUU7WUFDcEIsS0FBSyxNQUFNLENBQUMsT0FBTztnQkFDakIsTUFBTSxLQUFLLEdBQUcsS0FBTSxDQUFDLElBQUksQ0FBQTtnQkFDekIsTUFBTSxPQUFPLEdBQUcsS0FBTSxDQUFDLE1BQU0sRUFBRSxDQUFBO2dCQUMvQixJQUFJLENBQUMsVUFBVyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUE7Z0JBQzVDLE1BQUs7WUFDUCxLQUFLLE1BQU0sQ0FBQyxPQUFPO2dCQUNqQixlQUFlLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxLQUFNLENBQUMsQ0FBQTtnQkFDbkMsTUFBSztZQUNQLEtBQUssTUFBTSxDQUFDLEtBQUs7Z0JBQ2YsUUFBUSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsS0FBTSxDQUFDLENBQUE7Z0JBQzVCLE1BQUs7WUFDUCxLQUFLLE1BQU0sQ0FBQyxJQUFJO2dCQUNkLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLElBQUksRUFBRSxDQUFBO2dCQUN6QyxNQUFLO1lBQ1AsS0FBSyxNQUFNLENBQUMsTUFBTTtnQkFDaEIsSUFBSSxDQUFDLFVBQVUsRUFBRSxXQUFXLENBQUMsS0FBSyxDQUFDLElBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFBO2dCQUNsRCxNQUFLO1lBQ1A7Z0JBQ0UsTUFBTSxJQUFJLEtBQUssQ0FBQyxxQkFBcUIsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEQ7SUFDSCxDQUFDLENBQUMsQ0FBQTtBQUNKLENBQUM7QUFDRCxTQUFTLGVBQWUsQ0FBQyxJQUFpQixFQUFFLEtBQWM7SUFDeEQsTUFBTSxjQUFjLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUE7SUFDbEQsTUFBTSxJQUFJLEdBQVUsRUFBRSxDQUFBO0lBQ3RCLGNBQWMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDNUIsSUFBSSxJQUFJLENBQUMsUUFBUSxJQUFJLENBQUMsRUFBRTtZQUN0QixNQUFNLEdBQUcsR0FBSSxJQUFvQixDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQTtZQUNyRCxJQUFJLEdBQUcsRUFBRTtnQkFDUCxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFBO2FBQ2pCO1NBQ0Y7SUFDSCxDQUFDLENBQUMsQ0FBQTtJQUVGLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDbkIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQTtRQUN4QixJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssTUFBTSxDQUFDLE9BQU8sRUFBRTtZQUNoQyxjQUFjO1lBQ2QsSUFBSSxjQUFjLENBQUMsS0FBSyxDQUFDLEtBQUssSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDcEQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUE7YUFDekM7WUFDRCxjQUFjLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQTtTQUNoQzthQUFNLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxNQUFNLENBQUMsT0FBTyxFQUFFO1lBQ3ZDLGNBQWM7WUFDZCxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7Z0JBQ3BDLENBQUMsQ0FBRSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQWlCLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQztnQkFDdEQsQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxRQUFRO29CQUMvQixDQUFDLENBQUUsSUFBSSxDQUFDLElBQWdCLENBQUMsTUFBTSxFQUFFO29CQUNqQyxDQUFDLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7WUFDdEMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLFVBQXVCLENBQUMsQ0FBQTtZQUN4RCxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFBO1NBQzlEO0lBQ0gsQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDO0FBRUQsU0FBUyxRQUFRLENBQUMsSUFBaUIsRUFBRSxLQUFZO0lBQy9DLEtBQUssSUFBSSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQzlDLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLFNBQVMsRUFBRTtZQUM1QixJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1NBQzFCO2FBQU07WUFDTCxjQUFPLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQTtTQUMxQjtLQUNGO0FBQ0gsQ0FBQyJ9